{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to the User Manual for the Genomics Core The Core is part of a suite of genome analysis tools that explore bacterial genomes. The suite includes: Application Description The Core Genome assembly, taxonomic classification, phylogeny, annotation and mass screening. Tool 1 Mass screening with curated databases. Tool 2 Mass screening with genes you choose. Tool 3 Comparison of genomes, and phylogeny. Tool 4 Primer design: identification of unique stretches of DNA. They are built with the pipeline manager Nextflow , and operate within Singularity containers. The suite was developed as part of a collaborative project between Volac International Ltd . and Cardiff University , partly funded by Innovate UK as part of a knowledge transfer partnership (KTP) . What is the Core for? The Core processes raw paired-end sequence data in order to: assembly genomes (with pre- and post-quality control analysis), conduct mass screening using curated libraries of genes. e.g. resfinder, annotate the assembled genomes, determine the taxonomic classification for each isolate, e.g. Lactobacillus plantarum , draw a phylogenomic tree based on 172 common genes, and reports any anomalous outcomes. Additionally, the Core provides inputs for downstream analysis by the Tools and also for external appliances. What does the Core do? The main components of appliance_GBA are: quality and adapter trimming of raw read data by trim_galore (a wrapper for cutadapt and FastQC ). FastQC runs after trimming is complete and generates a report for each sample, identification of potential contamination by kraken2 , genomes are assembled by shovill , QC is conducted on the assembled genomes using quast , the assembled genomes are annotated by prokka , mass screening of the assembled genomes for genes of interest or hazard by ABRicate , MultiQC combines the QC and annotation reports into a single summary, classification of the isolates to species level by kraken2 and fastANI . The results are combined into a single table via awk commands, and LS-BSR and FastTree generate a phylogenomic tree based on 172 pre-define genes (see Zheng et al. 2015, figure 1 ).","title":"Introduction"},{"location":"index.html#welcome-to-the-user-manual-for-the-genomics-core","text":"The Core is part of a suite of genome analysis tools that explore bacterial genomes. The suite includes: Application Description The Core Genome assembly, taxonomic classification, phylogeny, annotation and mass screening. Tool 1 Mass screening with curated databases. Tool 2 Mass screening with genes you choose. Tool 3 Comparison of genomes, and phylogeny. Tool 4 Primer design: identification of unique stretches of DNA. They are built with the pipeline manager Nextflow , and operate within Singularity containers. The suite was developed as part of a collaborative project between Volac International Ltd . and Cardiff University , partly funded by Innovate UK as part of a knowledge transfer partnership (KTP) .","title":"Welcome to the User Manual for the Genomics Core"},{"location":"index.html#what-is-the-core-for","text":"The Core processes raw paired-end sequence data in order to: assembly genomes (with pre- and post-quality control analysis), conduct mass screening using curated libraries of genes. e.g. resfinder, annotate the assembled genomes, determine the taxonomic classification for each isolate, e.g. Lactobacillus plantarum , draw a phylogenomic tree based on 172 common genes, and reports any anomalous outcomes. Additionally, the Core provides inputs for downstream analysis by the Tools and also for external appliances.","title":"What is the Core for?"},{"location":"index.html#what-does-the-core-do","text":"The main components of appliance_GBA are: quality and adapter trimming of raw read data by trim_galore (a wrapper for cutadapt and FastQC ). FastQC runs after trimming is complete and generates a report for each sample, identification of potential contamination by kraken2 , genomes are assembled by shovill , QC is conducted on the assembled genomes using quast , the assembled genomes are annotated by prokka , mass screening of the assembled genomes for genes of interest or hazard by ABRicate , MultiQC combines the QC and annotation reports into a single summary, classification of the isolates to species level by kraken2 and fastANI . The results are combined into a single table via awk commands, and LS-BSR and FastTree generate a phylogenomic tree based on 172 pre-define genes (see Zheng et al. 2015, figure 1 ).","title":"What does the Core do?"},{"location":"access.html","text":"Logging in Connect your local computer to the server. MobaXterm , the enhanced terminal for Windows is recommended. Folders can be found in the side bar to the left. Folders and files can be directly dragged and dropped between your personal computer and the Tool. This Tool is located inside the genome_store folder. Opening a stable connection (recommended) You currently have access to the Tool if you have completed the above section. However, sometimes the network connection between the computer that you are using and the machine where the Tool is located can break. If the Tool is running when the connection breaks, even if the break is only brief, the Tool will stop. You can tell if this has happen because your terminal\u2019s window will freeze; there may also be a partially populated output folder. A terminal multiplexer (tmux) solves this. A terminal multiplexer allows the user to start a session and then detach, so a remote process continues running even when the user is disconnected. It also has the benefit of allowing the user to detach from one computer and reattach using a different computer. To initiate a tmux session in the Appliance terminal window enter: tmux new -s <name> Example This is the code to set up a stable tmux connection named Idris: tmux new -s Idris Tip You can set up multiple tmux sessions; give each one a different name. To detach from a session hold down the Ctrl key and press b , release both keys, then press d . To list existing tmux sessions use tmux ls . To reconnect to an existing session use tmux a -t <name> .","title":"Accessing the server"},{"location":"access.html#logging-in","text":"Connect your local computer to the server. MobaXterm , the enhanced terminal for Windows is recommended. Folders can be found in the side bar to the left. Folders and files can be directly dragged and dropped between your personal computer and the Tool. This Tool is located inside the genome_store folder.","title":"Logging in"},{"location":"access.html#opening-a-stable-connection-recommended","text":"You currently have access to the Tool if you have completed the above section. However, sometimes the network connection between the computer that you are using and the machine where the Tool is located can break. If the Tool is running when the connection breaks, even if the break is only brief, the Tool will stop. You can tell if this has happen because your terminal\u2019s window will freeze; there may also be a partially populated output folder. A terminal multiplexer (tmux) solves this. A terminal multiplexer allows the user to start a session and then detach, so a remote process continues running even when the user is disconnected. It also has the benefit of allowing the user to detach from one computer and reattach using a different computer. To initiate a tmux session in the Appliance terminal window enter: tmux new -s <name> Example This is the code to set up a stable tmux connection named Idris: tmux new -s Idris Tip You can set up multiple tmux sessions; give each one a different name. To detach from a session hold down the Ctrl key and press b , release both keys, then press d . To list existing tmux sessions use tmux ls . To reconnect to an existing session use tmux a -t <name> .","title":"Opening a stable connection (recommended)"},{"location":"faq.html","text":"FAQs What information does the Core require to run? The Core requires raw, paired-end Illumina sequencing data, and it requires a sample sheet. What documents are made by the Core? The name of an isolate is shown by '*'. The addition of the isolate's Genus and species is shown by '#'. Folder names Outputs / run_parameters.txt / software_version_report.txt / failure_summary.csv 00_rawData/ *_R1.fastq.gz *_R2.fastq.gz 01_rawPrep/ *_R1_001_val_1.fq.gz *_R2_001_val_1.fq.gz 02_assemblies/ fa/#*.fa gfa/#*.gfa 03_QC/ quast_report.tsv seqTK.summary.csv NB501042_139_HFHHCAFXY_multiqc_report_data/ NB501042_139_HFHHCAFXY_multiqc_report.html counts/*_count.txt kraken2_raw/*_kraken2_reads.report 04_mass_screening/ summary_'database'-75.tab isolate/#*_'database'-75.tab 05_annotation/ #*_.faa #*_.fna #*_.gbk #*_.gff 06_taxonomy/ summary_taxonomyTable.csv isolate/*_ani.tab 07_phylogeny/ sequencerID_run#_flowCellID.nwk What are the different folders? The Core's file system contains the following files and folders: Directory names Description of contents core.nf The Core nextflowscript. nextflow.config The nextflow config file. input_core/ Deposit the raw reads and sample sheet here. output_core/ Core deposits data here. work/ The Nextflow working directory. config/ Ignore. downloads/ Save your compressed data here. How do you view the output files? You can open the files in a spreadsheet, e.g. MS Excel. The output files are in .tab format. The run_parameters.txt document can be opened in any text editor. Is there a limit to how many genome assemblies the Core can screen? There is no lower or upper limit on how many genomes the Core can analyse.","title":"FAQs"},{"location":"faq.html#faqs","text":"","title":"FAQs"},{"location":"faq.html#what-information-does-the-core-require-to-run","text":"The Core requires raw, paired-end Illumina sequencing data, and it requires a sample sheet.","title":"What information does the Core require to run?"},{"location":"faq.html#what-documents-are-made-by-the-core","text":"The name of an isolate is shown by '*'. The addition of the isolate's Genus and species is shown by '#'. Folder names Outputs / run_parameters.txt / software_version_report.txt / failure_summary.csv 00_rawData/ *_R1.fastq.gz *_R2.fastq.gz 01_rawPrep/ *_R1_001_val_1.fq.gz *_R2_001_val_1.fq.gz 02_assemblies/ fa/#*.fa gfa/#*.gfa 03_QC/ quast_report.tsv seqTK.summary.csv NB501042_139_HFHHCAFXY_multiqc_report_data/ NB501042_139_HFHHCAFXY_multiqc_report.html counts/*_count.txt kraken2_raw/*_kraken2_reads.report 04_mass_screening/ summary_'database'-75.tab isolate/#*_'database'-75.tab 05_annotation/ #*_.faa #*_.fna #*_.gbk #*_.gff 06_taxonomy/ summary_taxonomyTable.csv isolate/*_ani.tab 07_phylogeny/ sequencerID_run#_flowCellID.nwk","title":"What documents are made by the Core?"},{"location":"faq.html#what-are-the-different-folders","text":"The Core's file system contains the following files and folders: Directory names Description of contents core.nf The Core nextflowscript. nextflow.config The nextflow config file. input_core/ Deposit the raw reads and sample sheet here. output_core/ Core deposits data here. work/ The Nextflow working directory. config/ Ignore. downloads/ Save your compressed data here.","title":"What are the different folders?"},{"location":"faq.html#how-do-you-view-the-output-files","text":"You can open the files in a spreadsheet, e.g. MS Excel. The output files are in .tab format. The run_parameters.txt document can be opened in any text editor.","title":"How do you view the output files?"},{"location":"faq.html#is-there-a-limit-to-how-many-genome-assemblies-the-core-can-screen","text":"There is no lower or upper limit on how many genomes the Core can analyse.","title":"Is there a limit to how many genome assemblies the Core can screen?"},{"location":"loading.html","text":"Loading your raw data Transferring your data to the Core The sequencing facility will let you know once your samples are processed. They will send you an email with instructions on how to download your data. Transfer the raw data directly to the Core's downloads folder on the Volac server. You will likely use the copy URL, curl , command. Make sure you have established a stable connection before transferring the data. The command will take some time to run depending on the amount of data and the transfer speed. You can detach and reconnect to your tmux session at any point. This will not interfer with execution of the command. Example The command to transfer the raw data may look something like this: curl -sL https://leopard.bios.cf.ac.uk/nextcloud/index.php/s/gFHjWEoIR26OZec/download > /genomics/home/vol-genomics/genome_tools/Core/downloads/2022-04-29.zip You can choose the name of the downloaded file, in this case 2022-04-29.zip . Unpacking your data The data files are compressed. To extract the data files enter, substituting YYYY-MM-DD for the actual file name: unzip YYYY-MM-DD.zip -d /genomics/home/vol-genomics/genome_tools/Core/downloads/ Information ZIP is a common file format that's used to compress one or more files together into a single location. This reduces file size and makes it easier to transport or store. A recipient can unzip (or extract) a ZIP file after transport and use the file in the original format. Loading your data into the input folder Make a new sub-directory in the input directory using: mkdir ~/genome_tools/Core/input_core/YYYY-MM-DD Move the raw data files to the Core's inut folder using: mv ~/genome_tools/Core/downloads/YYYY-MM-DD/*_001.fastq.gz ~/genome_tools/Core/input_core/YYYY-MM-DD Replace YYYY-MM-DD with actual folder name. You do not need to replace the * ; it is a glob character. Checking transfer is complete Navigate to new folder in input_core and check there are two files for every sequenced isolate. The two files are named *_R1_001.fastq.gz and *_R2_001.fastq.gz , where * is a unique identification code assigned by the sequencing facility. Example Forward: AB_PS_1_S1 _R1_001.fastq.gz , and Reverse: AB_PS_1_S1 _R2_001.fastq.gz . Forward: AB_PS_2_S2 _R1_001.fastq.gz , and Reverse: AB_PS_2_S2 _R2_001.fastq.gz The files are called 'forward' R1 , and 'reverse' R2 . Important If your samples were processed using an Illumina MiSeq, rather than an Illumina NextSeq the sample names will include an additional _L001 . This is important to know when you start the Core. Removing the intermediate files Delete the unzipped files from the downloads folder. Do NOT delete YYYY-MM-DD.zip .","title":"Loading the raw data"},{"location":"loading.html#loading-your-raw-data","text":"","title":"Loading your raw data"},{"location":"loading.html#transferring-your-data-to-the-core","text":"The sequencing facility will let you know once your samples are processed. They will send you an email with instructions on how to download your data. Transfer the raw data directly to the Core's downloads folder on the Volac server. You will likely use the copy URL, curl , command. Make sure you have established a stable connection before transferring the data. The command will take some time to run depending on the amount of data and the transfer speed. You can detach and reconnect to your tmux session at any point. This will not interfer with execution of the command. Example The command to transfer the raw data may look something like this: curl -sL https://leopard.bios.cf.ac.uk/nextcloud/index.php/s/gFHjWEoIR26OZec/download > /genomics/home/vol-genomics/genome_tools/Core/downloads/2022-04-29.zip You can choose the name of the downloaded file, in this case 2022-04-29.zip .","title":"Transferring your data to the Core"},{"location":"loading.html#unpacking-your-data","text":"The data files are compressed. To extract the data files enter, substituting YYYY-MM-DD for the actual file name: unzip YYYY-MM-DD.zip -d /genomics/home/vol-genomics/genome_tools/Core/downloads/ Information ZIP is a common file format that's used to compress one or more files together into a single location. This reduces file size and makes it easier to transport or store. A recipient can unzip (or extract) a ZIP file after transport and use the file in the original format.","title":"Unpacking your data"},{"location":"loading.html#loading-your-data-into-the-input-folder","text":"Make a new sub-directory in the input directory using: mkdir ~/genome_tools/Core/input_core/YYYY-MM-DD Move the raw data files to the Core's inut folder using: mv ~/genome_tools/Core/downloads/YYYY-MM-DD/*_001.fastq.gz ~/genome_tools/Core/input_core/YYYY-MM-DD Replace YYYY-MM-DD with actual folder name. You do not need to replace the * ; it is a glob character.","title":"Loading your data into the input folder"},{"location":"loading.html#checking-transfer-is-complete","text":"Navigate to new folder in input_core and check there are two files for every sequenced isolate. The two files are named *_R1_001.fastq.gz and *_R2_001.fastq.gz , where * is a unique identification code assigned by the sequencing facility. Example Forward: AB_PS_1_S1 _R1_001.fastq.gz , and Reverse: AB_PS_1_S1 _R2_001.fastq.gz . Forward: AB_PS_2_S2 _R1_001.fastq.gz , and Reverse: AB_PS_2_S2 _R2_001.fastq.gz The files are called 'forward' R1 , and 'reverse' R2 . Important If your samples were processed using an Illumina MiSeq, rather than an Illumina NextSeq the sample names will include an additional _L001 . This is important to know when you start the Core.","title":"Checking transfer is complete"},{"location":"loading.html#removing-the-intermediate-files","text":"Delete the unzipped files from the downloads folder. Do NOT delete YYYY-MM-DD.zip .","title":"Removing the intermediate files"},{"location":"quick.html","text":"Quick start commands Deposit the raw data in a sub-folder named YYYY-MM-DD/ inside input_core . Deposit the sample sheet in input_core . Set up a stable connection using tmux new -s 'name' . To run the Core: nextflow run core.nf \u2013-indexpath 'index_YYYY-MM-DD.csv' --inputfq 'YYYY-MM-DD/*_R{1,2}_001.fastq.gz' Parameters Term Description Example --indexpath Sample sheet name 'index_2022-04-29.csv' --inputfq Raw data location '2022-04-29/*_R{1,2}_001.fastq.gz' Example nextflow run core.nf --indexpath 'index_2022-04-29.csv' --inputfq '2022-04-29/*_R{1,2}_001.fastq.gz' Tip To view the Quick start instructions from the command line use: nextflow run core.nf --help","title":"Quick start"},{"location":"quick.html#quick-start-commands","text":"Deposit the raw data in a sub-folder named YYYY-MM-DD/ inside input_core . Deposit the sample sheet in input_core . Set up a stable connection using tmux new -s 'name' . To run the Core: nextflow run core.nf \u2013-indexpath 'index_YYYY-MM-DD.csv' --inputfq 'YYYY-MM-DD/*_R{1,2}_001.fastq.gz'","title":"Quick start commands"},{"location":"quick.html#parameters","text":"Term Description Example --indexpath Sample sheet name 'index_2022-04-29.csv' --inputfq Raw data location '2022-04-29/*_R{1,2}_001.fastq.gz' Example nextflow run core.nf --indexpath 'index_2022-04-29.csv' --inputfq '2022-04-29/*_R{1,2}_001.fastq.gz' Tip To view the Quick start instructions from the command line use: nextflow run core.nf --help","title":"Parameters"},{"location":"running.html","text":"Before starting the Core, complete all of the following: Checklist Access Volac's genomics server Secure connection set up Raw data saved in a sub-folder inside input_core Sample sheet made and saved inside input_core Starting the Core First enter this command: cd ~/genome_tools/Core Then enter one of the following commands, depending on the file extension of your raw read data. If the file extension of your raw read data is .fastq.gz , enter this command, replacing YYYY-MM-DD with a date: nextflow run core.nf --indexpath 'index_YYYY-MM-DD.csv' --inputfq 'YYYY-MM-DD/*_R{1,2}_001.fastq.gz' If the file extension of your raw read data is .fq.gz , enter this command, replacing YYYY-MM-DD with a date: nextflow run core.nf --indexpath 'index_YYYY-MM-DD.csv' --inputfq 'YYYY-MM-DD/*_R{1,2}_001.fq.gz' The sample sheet Use --indexpath 'index_YYYY-MM-DD.csv' to tell the Core which sample sheet to use. For example, --indexpath 'index_2022-04-29.csv' The raw data Use --inputfq 'YYYY-MM-DD/*_R{1,2}_001.fastq.gz' to tell the Core which raw data to use. For example, --inputfq '2022-04-29/*_R{1,2}_001.fastq.gz' Example The full entry will be: nextflow run core.nf --indexpath 'index_2022-04-29.csv' --inputfq '2022-04-29/*_R{1,2}_001.fastq.gz' Exception (for MiSeq raw data) If your samples were sequenced using MiSeq technology (rather than NextSeq) an additional 5 characters are required to start the Core, _L001 . Use --inputfq 'YYYY-MM-DD/*_L001_R{1,2}_001.fastq.gz' to tell the Core which raw data to use. Everything else remains the same. MiSeq example The full entry will be: nextflow run core.nf --indexpath 'index_2022-04-29.csv' --inputfq '2022-04-29/*_L001_R{1,2}_001.fastq.gz'","title":"Initiating the Core"},{"location":"running.html#starting-the-core","text":"First enter this command: cd ~/genome_tools/Core Then enter one of the following commands, depending on the file extension of your raw read data. If the file extension of your raw read data is .fastq.gz , enter this command, replacing YYYY-MM-DD with a date: nextflow run core.nf --indexpath 'index_YYYY-MM-DD.csv' --inputfq 'YYYY-MM-DD/*_R{1,2}_001.fastq.gz' If the file extension of your raw read data is .fq.gz , enter this command, replacing YYYY-MM-DD with a date: nextflow run core.nf --indexpath 'index_YYYY-MM-DD.csv' --inputfq 'YYYY-MM-DD/*_R{1,2}_001.fq.gz' The sample sheet Use --indexpath 'index_YYYY-MM-DD.csv' to tell the Core which sample sheet to use. For example, --indexpath 'index_2022-04-29.csv' The raw data Use --inputfq 'YYYY-MM-DD/*_R{1,2}_001.fastq.gz' to tell the Core which raw data to use. For example, --inputfq '2022-04-29/*_R{1,2}_001.fastq.gz' Example The full entry will be: nextflow run core.nf --indexpath 'index_2022-04-29.csv' --inputfq '2022-04-29/*_R{1,2}_001.fastq.gz'","title":"Starting the Core"},{"location":"running.html#exception-for-miseq-raw-data","text":"If your samples were sequenced using MiSeq technology (rather than NextSeq) an additional 5 characters are required to start the Core, _L001 . Use --inputfq 'YYYY-MM-DD/*_L001_R{1,2}_001.fastq.gz' to tell the Core which raw data to use. Everything else remains the same. MiSeq example The full entry will be: nextflow run core.nf --indexpath 'index_2022-04-29.csv' --inputfq '2022-04-29/*_L001_R{1,2}_001.fastq.gz'","title":"Exception (for MiSeq raw data)"},{"location":"sampleSheet.html","text":"Preparing the sample sheet Make the sample sheet on your personal computer The sample sheet is a document that allows you to rename the samples with a meaningful and easily recognisable name than the sequencing I.D. To make the sample sheet: Open a new spreadsheet document on your personal computer, for example, in MS Excel. Populate the first column with the unique identification code given to each sample by the sequencing facility. Populate the second column with a name that is meaningful to you and will be easily recognisable during downstream analysis. The characters can be letters, numbers or \u2018_\u2019. Save the spreadsheet as index_YYYY-MM-DD.csv , substituting YYYY-MM-DD for today's date. Example sample sheet saved as index_2022-04-29.csv : AB_PS_1_S1 MTD1_4053D AB_PS_2_S2 MTD1_DSM AB_PS_3_S33 PJB1 AB_PS_4_S86 FYS77 In this case there are four samples. The names given by the sequencing facility start AB_PS_. Important The sample sheet does not have a header row. 1 row = 1 sample. It must be saved in comma separated value (.csv) format. Finding the unique identification code The unique identification code used by the sequencing facility is the first part of the sample's name. Remember, there are two files per sample. For example, if your file pairs are named AB_PS_1_S1 _R1_001.fastq.gz and AB_PS_1_S1 _R2_001.fastq.gz enter AB_PS_1_S1 , ignoring _R1_001.fastq.gz and _R2_001.fastq.gz . Upload the sample sheet to the Core Upload (drag and drop) index_YYYY-MM-DD.csv into the Core input directory: /Core/input_core A folder with your raw data is also saved here. Tip For each sequencing run you will deposit one index file, index_YYYY-MM-DD.csv , and one directory containing the raw read data, YYYY-MM-DD/ . The Core is now ready to run.","title":"Preparing the sample sheet"},{"location":"sampleSheet.html#preparing-the-sample-sheet","text":"","title":"Preparing the sample sheet"},{"location":"sampleSheet.html#make-the-sample-sheet-on-your-personal-computer","text":"The sample sheet is a document that allows you to rename the samples with a meaningful and easily recognisable name than the sequencing I.D. To make the sample sheet: Open a new spreadsheet document on your personal computer, for example, in MS Excel. Populate the first column with the unique identification code given to each sample by the sequencing facility. Populate the second column with a name that is meaningful to you and will be easily recognisable during downstream analysis. The characters can be letters, numbers or \u2018_\u2019. Save the spreadsheet as index_YYYY-MM-DD.csv , substituting YYYY-MM-DD for today's date. Example sample sheet saved as index_2022-04-29.csv : AB_PS_1_S1 MTD1_4053D AB_PS_2_S2 MTD1_DSM AB_PS_3_S33 PJB1 AB_PS_4_S86 FYS77 In this case there are four samples. The names given by the sequencing facility start AB_PS_. Important The sample sheet does not have a header row. 1 row = 1 sample. It must be saved in comma separated value (.csv) format. Finding the unique identification code The unique identification code used by the sequencing facility is the first part of the sample's name. Remember, there are two files per sample. For example, if your file pairs are named AB_PS_1_S1 _R1_001.fastq.gz and AB_PS_1_S1 _R2_001.fastq.gz enter AB_PS_1_S1 , ignoring _R1_001.fastq.gz and _R2_001.fastq.gz .","title":"Make the sample sheet on your personal computer"},{"location":"sampleSheet.html#upload-the-sample-sheet-to-the-core","text":"Upload (drag and drop) index_YYYY-MM-DD.csv into the Core input directory: /Core/input_core A folder with your raw data is also saved here. Tip For each sequencing run you will deposit one index file, index_YYYY-MM-DD.csv , and one directory containing the raw read data, YYYY-MM-DD/ . The Core is now ready to run.","title":"Upload the sample sheet to the Core"},{"location":"troubleshooting.html","text":"Troubleshooting These are some common remedies: It is (usually) safer to copy and paste commands To avoid spellling error use the \u2018tab\u2019 key to auto-complete Do the hyphens or inverted commas need to be re-typed? Are the spaces in the correct place? Is the command prompt in the correct directory (folder)? Is the login connection still active Is the input file named correctly? Never use {} or [] in file names. If these fail, ask for help.","title":"Troubleshooting"},{"location":"troubleshooting.html#troubleshooting","text":"These are some common remedies: It is (usually) safer to copy and paste commands To avoid spellling error use the \u2018tab\u2019 key to auto-complete Do the hyphens or inverted commas need to be re-typed? Are the spaces in the correct place? Is the command prompt in the correct directory (folder)? Is the login connection still active Is the input file named correctly? Never use {} or [] in file names. If these fail, ask for help.","title":"Troubleshooting"},{"location":"unloading.html","text":"Downloading the output files Each time the Core runs it makes a new folder inside the output folder, output_core , which can be found here: ~/genome_tools/Core/output_core/ To transfer the files to your personal computer drag and drop to your local machine. Information The output folders are named according to the run parameters: YYYY-MM-DD_time_sequencerID_run#_flowCellID/ For example 2019-08-02_16:00_NB501042_129_H73YYAFXY In this case the Core was run on August 2nd 2019 at 4 pm. The data for the analysis was generated by sequencing machine NB501042, this is the 129th run performed by this machine and the unique identifier of the sequencing flow cell is H73YYAFXY.","title":"Downloading outputs"},{"location":"unloading.html#downloading-the-output-files","text":"Each time the Core runs it makes a new folder inside the output folder, output_core , which can be found here: ~/genome_tools/Core/output_core/ To transfer the files to your personal computer drag and drop to your local machine. Information The output folders are named according to the run parameters: YYYY-MM-DD_time_sequencerID_run#_flowCellID/ For example 2019-08-02_16:00_NB501042_129_H73YYAFXY In this case the Core was run on August 2nd 2019 at 4 pm. The data for the analysis was generated by sequencing machine NB501042, this is the 129th run performed by this machine and the unique identifier of the sequencing flow cell is H73YYAFXY.","title":"Downloading the output files"}]}